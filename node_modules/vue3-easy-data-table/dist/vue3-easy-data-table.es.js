var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, useCssVars, unref, computed, inject, openBlock, createElementBlock, withModifiers, createElementVNode, normalizeClass, pushScopeId, popScopeId, ref, watch, onMounted, onBeforeUnmount, toDisplayString, Fragment, renderList, useSlots, renderSlot, createCommentVNode, provide, toRefs, normalizeStyle, createBlock, normalizeProps, mergeProps, createTextVNode, guardReactiveProps, createVNode, createSlots, withCtx } from "vue";
var MutipleSelectCheckBox_vue_vue_type_style_index_0_scoped_true_lang = "";
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _withScopeId$5 = (n) => (pushScopeId("data-v-566775ba"), n = n(), popScopeId(), n);
const _hoisted_1$7 = ["onClick"];
const _hoisted_2$6 = ["checked"];
const _hoisted_3$4 = /* @__PURE__ */ _withScopeId$5(() => /* @__PURE__ */ createElementVNode("label", { for: "checbox" }, null, -1));
const _sfc_main$7 = /* @__PURE__ */ defineComponent({
  props: {
    status: { type: String, required: true }
  },
  emits: ["change"],
  setup(__props, { emit: emits }) {
    const props = __props;
    useCssVars((_ctx) => ({
      "7f84b28f": unref(themeColor)
    }));
    const isChecked = computed(() => props.status === "allSelected");
    const toggleChecked = () => {
      emits("change", !isChecked.value);
    };
    const themeColor = inject("themeColor");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: "multi-select__checkbox",
        onClick: withModifiers(toggleChecked, ["stop", "prevent"])
      }, [
        createElementVNode("input", {
          type: "checkbox",
          checked: unref(isChecked),
          class: normalizeClass(__props.status)
        }, null, 10, _hoisted_2$6),
        _hoisted_3$4
      ], 8, _hoisted_1$7);
    };
  }
});
var MutipleSelectCheckBox = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["__scopeId", "data-v-566775ba"]]);
var SingleSelectCheckBox_vue_vue_type_style_index_0_scoped_true_lang = "";
const _withScopeId$4 = (n) => (pushScopeId("data-v-39f156fd"), n = n(), popScopeId(), n);
const _hoisted_1$6 = ["checked"];
const _hoisted_2$5 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createElementVNode("label", { for: "checbox" }, null, -1));
const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  props: {
    checked: { type: Boolean, required: true }
  },
  emits: ["change"],
  setup(__props, { emit: emits }) {
    useCssVars((_ctx) => ({
      "20cfc5a0": unref(themeColor)
    }));
    const themeColor = inject("themeColor");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: "single-select__checkbox",
        onClick: _cache[0] || (_cache[0] = withModifiers(($event) => emits("change"), ["stop", "prevent"]))
      }, [
        createElementVNode("input", {
          type: "checkbox",
          checked: __props.checked
        }, null, 8, _hoisted_1$6),
        _hoisted_2$5
      ]);
    };
  }
});
var SingleSelectCheckBox = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["__scopeId", "data-v-39f156fd"]]);
var RowsSelector_vue_vue_type_style_index_0_scoped_true_lang = "";
const _withScopeId$3 = (n) => (pushScopeId("data-v-384d1036"), n = n(), popScopeId(), n);
const _hoisted_1$5 = { class: "easy-data-table__rows-selector" };
const _hoisted_2$4 = { class: "rows-input" };
const _hoisted_3$3 = /* @__PURE__ */ _withScopeId$3(() => /* @__PURE__ */ createElementVNode("div", { class: "triangle" }, null, -1));
const _hoisted_4$3 = ["onClick"];
const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  props: {
    modelValue: { type: Number, required: true },
    rowsItems: { type: Array, required: true }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: emits }) {
    const props = __props;
    useCssVars((_ctx) => ({
      "40595ee7": unref(themeColor)
    }));
    const showList = ref(false);
    const showInsideOfTable = ref(false);
    const dataTable = inject("dataTable");
    watch(showList, (val) => {
      if (val && dataTable) {
        const windowHeight = window.innerHeight;
        const dataTableHeight = dataTable.value.getBoundingClientRect().height;
        const dataTableTop = dataTable.value.getBoundingClientRect().top;
        if (windowHeight - (dataTableHeight + dataTableTop) <= 100) {
          showInsideOfTable.value = true;
        } else {
          showInsideOfTable.value = false;
        }
      }
    });
    const rowsComputed = computed({
      get: () => props.modelValue,
      set: (value) => {
        emits("update:modelValue", value);
      }
    });
    const changeSelectedRows = (value) => {
      rowsComputed.value = value;
      showList.value = false;
    };
    const isDescendant = (child, className) => {
      let node = child.parentNode;
      while (node != null) {
        if (node.classList && node.classList.contains(className)) {
          return true;
        }
        node = node.parentNode;
      }
      return false;
    };
    const closeRowsSelector = (e) => {
      if (!isDescendant(e.target, "easy-data-table__rows-selector"))
        showList.value = false;
    };
    onMounted(() => {
      document.addEventListener("click", closeRowsSelector);
    });
    onBeforeUnmount(() => {
      document.removeEventListener("click", closeRowsSelector);
    });
    const themeColor = inject("themeColor");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$5, [
        createElementVNode("div", {
          class: "rows-input__wrapper",
          onClick: _cache[0] || (_cache[0] = ($event) => showList.value = !showList.value)
        }, [
          createElementVNode("div", _hoisted_2$4, toDisplayString(unref(rowsComputed)), 1),
          _hoisted_3$3
        ]),
        createElementVNode("ul", {
          class: normalizeClass(["select-items", { show: showList.value, inside: showInsideOfTable.value }])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(__props.rowsItems, (item) => {
            return openBlock(), createElementBlock("li", {
              key: item,
              class: normalizeClass({ selected: item === unref(rowsComputed) }),
              onClick: ($event) => changeSelectedRows(item)
            }, toDisplayString(item), 11, _hoisted_4$3);
          }), 128))
        ], 2)
      ]);
    };
  }
});
var RowsSelector = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["__scopeId", "data-v-384d1036"]]);
var Loading_vue_vue_type_style_index_0_scoped_true_lang = "";
const _withScopeId$2 = (n) => (pushScopeId("data-v-1fa3a520"), n = n(), popScopeId(), n);
const _hoisted_1$4 = { class: "lds-ring" };
const _hoisted_2$3 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createElementVNode("div", null, null, -1));
const _hoisted_3$2 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createElementVNode("div", null, null, -1));
const _hoisted_4$2 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createElementVNode("div", null, null, -1));
const _hoisted_5$1 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createElementVNode("div", null, null, -1));
const _hoisted_6$1 = [
  _hoisted_2$3,
  _hoisted_3$2,
  _hoisted_4$2,
  _hoisted_5$1
];
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  setup(__props) {
    useCssVars((_ctx) => ({
      "26774109": unref(themeColor)
    }));
    const themeColor = inject("themeColor");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$4, _hoisted_6$1);
    };
  }
});
var Loading = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__scopeId", "data-v-1fa3a520"]]);
var LoadingLine_vue_vue_type_style_index_0_scoped_true_lang = "";
const _hoisted_1$3 = { class: "loader-line" };
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  setup(__props) {
    useCssVars((_ctx) => ({
      "0d327f57": unref(themeColor)
    }));
    const themeColor = inject("themeColor");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$3);
    };
  }
});
var LoadingLine = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__scopeId", "data-v-7d281cac"]]);
var ButtonsPagination_vue_vue_type_style_index_0_scoped_true_lang = "";
const _hoisted_1$2 = { class: "buttons-pagination" };
const _hoisted_2$2 = ["onClick"];
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  props: {
    maxPaginationNumber: { type: Number, required: true },
    currentPaginationNumber: { type: Number, required: true }
  },
  emits: ["updatePage"],
  setup(__props, { emit: emits }) {
    const props = __props;
    useCssVars((_ctx) => ({
      "57158340": unref(themeColor)
    }));
    const totalVisible = 7;
    const changePage = (item) => {
      if (item.type === "button" && !item.active)
        emits("updatePage", item.page);
    };
    const paginationItemsForRender = computed(() => {
      const paginationItems = [];
      if (props.maxPaginationNumber <= totalVisible) {
        for (let i = 1; i <= props.maxPaginationNumber; i += 1) {
          paginationItems.push({
            type: "button",
            page: i,
            active: i === props.currentPaginationNumber
          });
        }
      } else if ([1, 2, props.maxPaginationNumber, props.maxPaginationNumber - 1].includes(props.currentPaginationNumber)) {
        for (let i = 1; i <= totalVisible; i += 1) {
          if (i <= 3) {
            paginationItems.push({
              type: "button",
              page: i,
              active: i === props.currentPaginationNumber
            });
          } else if (i === 4) {
            paginationItems.push({
              type: "omission"
            });
          } else {
            const page = props.maxPaginationNumber - (totalVisible - i);
            paginationItems.push({
              type: "button",
              page,
              active: page === props.currentPaginationNumber
            });
          }
        }
      } else if ([3, 4].includes(props.currentPaginationNumber)) {
        for (let i = 1; i <= totalVisible; i += 1) {
          if (i <= 5) {
            paginationItems.push({
              type: "button",
              page: i,
              active: i === props.currentPaginationNumber
            });
          } else if (i === 6) {
            paginationItems.push({
              type: "omission"
            });
          } else {
            paginationItems.push({
              type: "button",
              page: props.maxPaginationNumber,
              active: props.maxPaginationNumber === props.currentPaginationNumber
            });
          }
        }
      } else if ([props.maxPaginationNumber - 2, props.maxPaginationNumber - 3].includes(props.currentPaginationNumber)) {
        for (let i = 1; i <= totalVisible; i += 1) {
          if (i === 1) {
            paginationItems.push({
              type: "button",
              page: 1,
              active: props.currentPaginationNumber === 1
            });
          } else if (i === 2) {
            paginationItems.push({
              type: "omission"
            });
          } else {
            const page = props.maxPaginationNumber - (totalVisible - i);
            paginationItems.push({
              type: "button",
              page,
              active: page === props.currentPaginationNumber
            });
          }
        }
      } else {
        for (let i = 1; i <= totalVisible; i += 1) {
          if (i === 1) {
            paginationItems.push({
              type: "button",
              page: 1,
              active: props.currentPaginationNumber === 1
            });
          } else if (i === 2 || i === 6) {
            paginationItems.push({
              type: "omission"
            });
          } else if (i === 7) {
            paginationItems.push({
              type: "button",
              page: props.maxPaginationNumber,
              active: props.maxPaginationNumber === props.currentPaginationNumber
            });
          } else {
            const diff = 4 - i;
            const page = props.currentPaginationNumber - diff;
            paginationItems.push({
              type: "button",
              page,
              active: page === props.currentPaginationNumber
            });
          }
        }
      }
      return paginationItems;
    });
    const themeColor = inject("themeColor");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$2, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(paginationItemsForRender), (item, i) => {
          return openBlock(), createElementBlock("div", {
            key: i,
            class: normalizeClass(["item", {
              button: item.type === "button",
              active: item.type === "button" && item.active,
              omission: item.type === "omission"
            }]),
            onClick: ($event) => changePage(item)
          }, toDisplayString(item.type === "button" ? item.page : "..."), 11, _hoisted_2$2);
        }), 128))
      ]);
    };
  }
});
var ButtonsPagination = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__scopeId", "data-v-c59f6f34"]]);
var PaginationArrows_vue_vue_type_style_index_0_scoped_true_lang = "";
const _withScopeId$1 = (n) => (pushScopeId("data-v-c9da5286"), n = n(), popScopeId(), n);
const _hoisted_1$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createElementVNode("span", { class: "arrow arrow-right" }, null, -1));
const _hoisted_2$1 = [
  _hoisted_1$1
];
const _hoisted_3$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createElementVNode("span", { class: "arrow arrow-left" }, null, -1));
const _hoisted_4$1 = [
  _hoisted_3$1
];
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  props: {
    isFirstPage: { type: Boolean, required: false },
    isLastPage: { type: Boolean, required: false }
  },
  emits: ["clickPrevPage", "clickNextPage"],
  setup(__props, { emit: emits }) {
    const slots = useSlots();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createElementVNode("div", {
          class: normalizeClass(["previous-page__click-button", { "first-page": __props.isFirstPage }]),
          onClick: _cache[0] || (_cache[0] = ($event) => emits("clickPrevPage"))
        }, _hoisted_2$1, 2),
        unref(slots).buttonsPagination ? renderSlot(_ctx.$slots, "buttonsPagination", { key: 0 }, void 0, true) : createCommentVNode("", true),
        createElementVNode("div", {
          class: normalizeClass(["next-page__click-button", { "last-page": __props.isLastPage }]),
          onClick: _cache[1] || (_cache[1] = ($event) => emits("clickNextPage"))
        }, _hoisted_4$1, 2)
      ], 64);
    };
  }
});
var PaginationArrows = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-c9da5286"]]);
var DataTable_vue_vue_type_style_index_0_scoped_true_lang = "";
var DataTable_vue_vue_type_style_index_1_lang = "";
const _withScopeId = (n) => (pushScopeId("data-v-73151d92"), n = n(), popScopeId(), n);
const _hoisted_1 = ["onClick"];
const _hoisted_2 = {
  key: 1,
  class: "header"
};
const _hoisted_3 = {
  key: 1,
  class: "header-text"
};
const _hoisted_4 = ["onClick"];
const _hoisted_5 = ["onClick"];
const _hoisted_6 = ["colspan"];
const _hoisted_7 = {
  key: 0,
  class: "vue3-easy-data-table__loading"
};
const _hoisted_8 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createElementVNode("div", { class: "vue3-easy-data-table__loading-mask" }, null, -1));
const _hoisted_9 = { class: "loading-entity" };
const _hoisted_10 = {
  key: 1,
  class: "vue3-easy-data-table__message"
};
const _hoisted_11 = {
  key: 0,
  class: "vue3-easy-data-table__footer"
};
const _hoisted_12 = {
  key: 0,
  class: "pagination__rows-per-page"
};
const _hoisted_13 = { class: "pagination__items-index" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  props: {
    alternating: {
      type: Boolean,
      default: false
    },
    buttonsPagination: {
      type: Boolean,
      default: false
    },
    checkboxColumnWidth: {
      type: Number,
      default: null
    },
    emptyMessage: {
      type: String,
      default: "No Available Data"
    },
    expandColumnWidth: {
      type: Number,
      default: 36
    },
    filterOptions: {
      type: Array,
      default: null
    },
    fixedExpand: {
      type: Boolean,
      default: false
    },
    fixedHeader: {
      type: Boolean,
      default: true
    },
    fixedCheckbox: {
      type: Boolean,
      default: false
    },
    fixedIndex: {
      type: Boolean,
      default: false
    },
    headers: {
      type: Array,
      required: true
    },
    hideFooter: {
      type: Boolean,
      default: false
    },
    hideRowsPerPage: {
      type: Boolean,
      default: false
    },
    hideHeader: {
      type: Boolean,
      default: false
    },
    indexColumnWidth: {
      type: Number,
      default: 60
    },
    items: {
      type: Array,
      required: true
    },
    itemsSelected: {
      type: Array,
      default: null
    },
    loading: {
      type: Boolean,
      deault: false
    },
    rowsPerPage: {
      type: Number,
      default: 25
    },
    rowsItems: {
      type: Array,
      default: () => [25, 50, 100]
    },
    rowsPerPageMessage: {
      type: String,
      default: "rows per page:"
    },
    searchField: {
      type: String,
      default: ""
    },
    searchValue: {
      type: String,
      default: ""
    },
    serverOptions: {
      type: Object,
      default: null
    },
    serverItemsLength: {
      type: Number,
      default: 0
    },
    showIndex: {
      type: Boolean,
      default: false
    },
    sortBy: {
      type: String,
      default: ""
    },
    sortType: {
      type: String,
      default: "asc"
    },
    tableHeight: {
      type: Number,
      default: null
    },
    themeColor: {
      type: String,
      default: "#42b883"
    },
    tableClassName: {
      type: String,
      default: ""
    },
    headerClassName: {
      type: String,
      default: ""
    },
    headerItemClassName: {
      type: [Function, String],
      default: ""
    },
    bodyRowClassName: {
      type: [Function, String],
      default: ""
    },
    bodyItemClassName: {
      type: [Function, String],
      default: ""
    },
    noHover: {
      type: Boolean,
      default: false
    },
    borderCell: {
      type: Boolean,
      default: false
    }
  },
  emits: [
    "update:itemsSelected",
    "update:serverOptions",
    "clickRow",
    "expandRow"
  ],
  setup(__props, { expose, emit: emits }) {
    const props = __props;
    useCssVars((_ctx) => ({
      "0c2293ca": unref(tableHeightPx)
    }));
    const tableHeightPx = computed(() => props.tableHeight ? `${props.tableHeight}px` : null);
    provide("themeColor", props.themeColor);
    const slots = useSlots();
    const ifHasPaginationSlot = computed(() => slots.pagination);
    const ifHasLoadingSlot = computed(() => slots.loading);
    const ifHasExpandSlot = computed(() => slots.expand);
    const dataTable = ref();
    const tableBody = ref();
    provide("dataTable", dataTable);
    const showShadow = ref(false);
    onMounted(() => {
      tableBody.value.addEventListener("scroll", () => {
        showShadow.value = tableBody.value.scrollLeft > 0;
      });
    });
    const serverOptionsComputed = computed({
      get: () => {
        if (props.serverOptions) {
          const {
            page,
            rowsPerPage,
            sortBy,
            sortType
          } = props.serverOptions;
          return {
            page,
            rowsPerPage,
            sortBy: sortBy != null ? sortBy : null,
            sortType: sortType != null ? sortType : null
          };
        }
        return null;
      },
      set: (value) => {
        emits("update:serverOptions", value);
      }
    });
    const isMutipleSelectable = computed(() => props.itemsSelected !== null);
    const isServerSideMode = computed(() => serverOptionsComputed.value !== null);
    const rowsItemsComputed = computed(() => {
      if (!isServerSideMode.value && props.rowsItems.findIndex((item) => item === props.rowsPerPage) === -1) {
        return [props.rowsPerPage, ...props.rowsItems];
      }
      return props.rowsItems;
    });
    const initClientSortOptions = () => {
      if (props.sortBy !== "") {
        return {
          sortBy: props.sortBy,
          sortDesc: props.sortType === "desc"
        };
      }
      return null;
    };
    const clientSortOptions = ref(initClientSortOptions());
    const hasFixedColumnsFromUser = computed(() => props.headers.findIndex((header) => header.fixed) !== -1);
    const fixedHeadersFromUser = computed(() => {
      if (hasFixedColumnsFromUser.value)
        return props.headers.filter((header) => header.fixed);
      return [];
    });
    const unFixedHeaders = computed(() => props.headers.filter((header) => !header.fixed));
    const headersForRender = computed(() => {
      var _a;
      const fixedHeaders2 = [
        ...fixedHeadersFromUser.value,
        ...unFixedHeaders.value
      ];
      const headersSorting = fixedHeaders2.map((header) => {
        const headerSorting = header;
        if (header.sortable)
          headerSorting.sortType = "none";
        if (serverOptionsComputed.value && header.value === serverOptionsComputed.value.sortBy && serverOptionsComputed.value.sortType) {
          headerSorting.sortType = serverOptionsComputed.value.sortType;
        }
        if (!isServerSideMode.value && clientSortOptions.value && header.value === clientSortOptions.value.sortBy) {
          headerSorting.sortType = clientSortOptions.value.sortDesc ? "desc" : "asc";
        }
        return headerSorting;
      });
      let headersWithExpand = [];
      if (!ifHasExpandSlot.value) {
        headersWithExpand = headersSorting;
      } else {
        const headerExpand = props.fixedExpand || hasFixedColumnsFromUser.value ? {
          text: "",
          value: "expand",
          fixed: true,
          width: props.expandColumnWidth
        } : { text: "", value: "expand" };
        headersWithExpand = [headerExpand, ...headersSorting];
      }
      let headersWithIndex = [];
      if (!props.showIndex) {
        headersWithIndex = headersWithExpand;
      } else {
        const headerIndex = props.fixedIndex || hasFixedColumnsFromUser.value ? {
          text: "#",
          value: "index",
          fixed: true,
          width: props.indexColumnWidth
        } : { text: "#", value: "index" };
        headersWithIndex = [headerIndex, ...headersWithExpand];
      }
      let headersWithCheckbox = [];
      if (!isMutipleSelectable.value) {
        headersWithCheckbox = headersWithIndex;
      } else {
        const headerCheckbox = props.fixedCheckbox || hasFixedColumnsFromUser.value ? {
          text: "checkbox",
          value: "checkbox",
          fixed: true,
          width: (_a = props.checkboxColumnWidth) != null ? _a : 36
        } : { text: "checkbox", value: "checkbox" };
        headersWithCheckbox = [headerCheckbox, ...headersWithIndex];
      }
      return headersWithCheckbox;
    });
    const expandingItemIndexList = ref([]);
    const updateExpandingItemIndexList = (expandingItemIndex, expandingItem, event) => {
      event.stopPropagation();
      const index = expandingItemIndexList.value.indexOf(expandingItemIndex);
      if (index !== -1) {
        expandingItemIndexList.value.splice(index, 1);
      } else {
        emits("expandRow", props.items.findIndex((item) => item === expandingItem));
        expandingItemIndexList.value.push(expandingItemIndex);
      }
    };
    const fixedHeaders = computed(() => headersForRender.value.filter((header) => header.fixed));
    const lastFixedColumn = computed(() => {
      if (!fixedHeaders.value.length)
        return "";
      return fixedHeaders.value[fixedHeaders.value.length - 1].value;
    });
    const getColStyle = (header) => {
      var _a;
      const width = (_a = header.width) != null ? _a : fixedHeaders.value.length ? 100 : null;
      if (width)
        return `width: ${width}px; min-width: ${width}px;`;
      return void 0;
    };
    const fixedColumnsInfos = computed(() => {
      if (!fixedHeaders.value.length)
        return [];
      const fixedHeadersWidthArr = fixedHeaders.value.map((header) => {
        var _a;
        return (_a = header.width) != null ? _a : 100;
      });
      return fixedHeaders.value.map((header, index) => {
        var _a, _b;
        return {
          value: header.value,
          fixed: (_a = header.fixed) != null ? _a : true,
          width: (_b = header.width) != null ? _b : 100,
          distance: index === 0 ? 0 : fixedHeadersWidthArr.reduce((previous, current, i) => {
            let distance = previous;
            if (i < index)
              distance += current;
            return distance;
          })
        };
      });
    });
    const getFixedDistance = (column, type = "th") => {
      if (!fixedHeaders.value.length)
        return void 0;
      const columInfo = fixedColumnsInfos.value.find((info) => info.value === column);
      if (columInfo) {
        return `left: ${columInfo.distance}px;z-index: ${type === "th" ? 3 : 1};position: sticky;`;
      }
      return void 0;
    };
    const headerColumns = computed(() => headersForRender.value.map((header) => header.value));
    const getItemValue = (column, item) => {
      if (column.includes(".")) {
        let content = "";
        const keysArr = column.split(".");
        keysArr.forEach((key, index) => {
          content = index === 0 ? item[key] : content[key];
        });
        return content;
      }
      return item[column];
    };
    const generateColumnContent = (column, item) => {
      const content = getItemValue(column, item);
      return Array.isArray(content) ? content.join(",") : content;
    };
    const selectItemsComputed = computed({
      get: () => {
        var _a;
        return (_a = props.itemsSelected) != null ? _a : [];
      },
      set: (value) => {
        emits("update:itemsSelected", value);
      }
    });
    const itemsSearching = computed(() => {
      if (!isServerSideMode.value && props.searchValue !== "") {
        const regex = new RegExp(props.searchValue, "i");
        return props.items.filter((item) => regex.test(props.searchField !== "" ? item[props.searchField] : Object.values(item).join(" ")));
      }
      return props.items;
    });
    const itemsFiltering = computed(() => {
      let itemsFiltered = [...itemsSearching.value];
      if (props.filterOptions) {
        props.filterOptions.forEach((option) => {
          itemsFiltered = itemsFiltered.filter((item) => {
            const { field, comparison, criteria } = option;
            switch (comparison) {
              case "=":
                return item[field] === criteria;
              case "!=":
                return item[field] !== criteria;
              case ">":
                return item[field] > criteria;
              case "<":
                return item[field] < criteria;
              case "<=":
                return item[field] <= criteria;
              case ">=":
                return item[field] >= criteria;
              case "between":
                return item[field] >= Math.min(...criteria) && item[field] <= Math.max(...criteria);
              default:
                return item[field] === criteria;
            }
          });
        });
        return itemsFiltered;
      }
      return itemsSearching.value;
    });
    const multipleSelectStatus = computed(() => {
      if (selectItemsComputed.value.length === 0) {
        return "noneSelected";
      }
      const isNoneSelected = selectItemsComputed.value.every((itemSelected) => {
        if (itemsFiltering.value.findIndex((item) => JSON.stringify(itemSelected) === JSON.stringify(item)) !== -1) {
          return false;
        }
        return true;
      });
      if (isNoneSelected)
        return "noneSelected";
      if (selectItemsComputed.value.length === itemsFiltering.value.length) {
        const isAllSelected = selectItemsComputed.value.every((itemSelected) => {
          if (itemsFiltering.value.findIndex((item) => JSON.stringify(itemSelected) === JSON.stringify(item)) === -1) {
            return false;
          }
          return true;
        });
        return isAllSelected ? "allSelected" : "partSelected";
      }
      return "partSelected";
    });
    const currentPaginationNumber = ref(isServerSideMode.value ? props.serverOptions.page : 1);
    const { items } = toRefs(props);
    watch(items, () => {
      if (!isServerSideMode.value)
        currentPaginationNumber.value = 1;
    }, { deep: true });
    const rowsPerPageReactive = ref(isServerSideMode.value ? props.serverOptions.rowsPerPage : props.rowsPerPage);
    watch(rowsPerPageReactive, (value) => {
      if (serverOptionsComputed.value) {
        serverOptionsComputed.value = __spreadProps(__spreadValues({}, serverOptionsComputed.value), {
          page: 1,
          rowsPerPage: value
        });
      }
      currentPaginationNumber.value = 1;
    });
    const updateSortField = (newSortBy, oldSortType) => {
      let newSortType = null;
      if (oldSortType === "none") {
        newSortType = "asc";
      } else if (oldSortType === "asc") {
        newSortType = "desc";
      } else {
        newSortType = null;
      }
      if (serverOptionsComputed.value) {
        serverOptionsComputed.value = __spreadProps(__spreadValues({}, serverOptionsComputed.value), {
          sortBy: newSortType !== null ? newSortBy : null,
          sortType: newSortType
        });
      } else if (newSortType === null) {
        clientSortOptions.value = null;
      } else {
        clientSortOptions.value = {
          sortBy: newSortBy,
          sortDesc: newSortType === "desc"
        };
      }
    };
    const itemsSorting = computed(() => {
      if (isServerSideMode.value)
        return props.items;
      if (clientSortOptions.value === null)
        return itemsFiltering.value;
      const { sortBy, sortDesc } = clientSortOptions.value;
      const itemsFilteringSorted = [...itemsFiltering.value];
      return itemsFilteringSorted.sort((a, b) => {
        if (getItemValue(sortBy, a) < getItemValue(sortBy, b))
          return sortDesc ? 1 : -1;
        if (getItemValue(sortBy, a) > getItemValue(sortBy, b))
          return sortDesc ? -1 : 1;
        return 0;
      });
    });
    const totalItemsLength = computed(() => isServerSideMode.value ? props.serverItemsLength : itemsFiltering.value.length);
    const lastIndexOfItemsInCurrentPage = computed(() => {
      if (isServerSideMode.value) {
        return currentPaginationNumber.value * rowsPerPageReactive.value;
      }
      return Math.min(itemsFiltering.value.length, currentPaginationNumber.value * rowsPerPageReactive.value);
    });
    const firstIndexOfItemsInCurrentPage = computed(() => (currentPaginationNumber.value - 1) * rowsPerPageReactive.value + 1);
    const maxPaginationNumber = computed(() => Math.ceil(totalItemsLength.value / rowsPerPageReactive.value));
    const isLastPage = computed(() => currentPaginationNumber.value === maxPaginationNumber.value);
    const isFirstPage = computed(() => currentPaginationNumber.value === 1);
    const { loading } = toRefs(props);
    const nextPage = () => {
      if (isLastPage.value)
        return;
      if (loading.value)
        return;
      if (serverOptionsComputed.value) {
        const nextPaginationNumber = currentPaginationNumber.value + 1;
        serverOptionsComputed.value = __spreadProps(__spreadValues({}, serverOptionsComputed.value), {
          page: nextPaginationNumber
        });
      } else {
        currentPaginationNumber.value += 1;
      }
    };
    const prevPage = () => {
      if (isFirstPage.value)
        return;
      if (loading.value)
        return;
      if (serverOptionsComputed.value) {
        const prevPaginationNumber = currentPaginationNumber.value - 1;
        serverOptionsComputed.value = __spreadProps(__spreadValues({}, serverOptionsComputed.value), {
          page: prevPaginationNumber
        });
      } else {
        currentPaginationNumber.value -= 1;
      }
    };
    const updatePage = (value) => {
      if (loading.value)
        return;
      if (serverOptionsComputed.value) {
        serverOptionsComputed.value = __spreadProps(__spreadValues({}, serverOptionsComputed.value), {
          page: value
        });
      } else {
        currentPaginationNumber.value = value;
      }
    };
    watch(loading, (newVal, oldVal) => {
      if (serverOptionsComputed.value) {
        if (newVal === false && oldVal === true) {
          currentPaginationNumber.value = serverOptionsComputed.value.page;
        }
      }
    });
    const itemsInPage = computed(() => {
      if (isServerSideMode.value)
        return props.items;
      return itemsSorting.value.slice(firstIndexOfItemsInCurrentPage.value - 1, lastIndexOfItemsInCurrentPage.value);
    });
    const currentPageFirstIndex = computed(() => rowsPerPageReactive.value * (currentPaginationNumber.value - 1) + 1);
    const currentPageLastIndex = computed(() => rowsPerPageReactive.value * currentPaginationNumber.value);
    const itemsWithIndex = computed(() => {
      if (props.showIndex) {
        return itemsInPage.value.map((item, index) => __spreadValues({ index: currentPageFirstIndex.value + index }, item));
      }
      return itemsInPage.value;
    });
    const itemsForRender = computed(() => {
      if (!isMutipleSelectable.value)
        return itemsWithIndex.value;
      if (multipleSelectStatus.value === "allSelected") {
        return itemsWithIndex.value.map((item) => __spreadValues({ checkbox: true }, item));
      }
      if (multipleSelectStatus.value === "noneSelected") {
        return itemsWithIndex.value.map((item) => __spreadValues({ checkbox: false }, item));
      }
      return itemsWithIndex.value.map((item) => {
        const isSelected = selectItemsComputed.value.findIndex((selectItem) => {
          const itemDeepCloned = __spreadValues({}, item);
          delete itemDeepCloned.index;
          return JSON.stringify(selectItem) === JSON.stringify(itemDeepCloned);
        }) !== -1;
        return __spreadValues({ checkbox: isSelected }, item);
      });
    });
    const toggleSelectAll = (isChecked) => {
      selectItemsComputed.value = isChecked ? itemsSorting.value : [];
    };
    const toggleSelectItem = (item) => {
      const isAlreadyChecked = item.checkbox;
      delete item.checkbox;
      delete item.index;
      if (!isAlreadyChecked) {
        const selectItemsArr = selectItemsComputed.value;
        selectItemsArr.unshift(item);
        selectItemsComputed.value = selectItemsArr;
      } else {
        selectItemsComputed.value = selectItemsComputed.value.filter((selectedItem) => JSON.stringify(selectedItem) !== JSON.stringify(item));
      }
    };
    const clickRow = (item) => {
      const clickRowArgument = __spreadValues({}, item);
      if (isMutipleSelectable.value) {
        const { checkbox } = item;
        delete clickRowArgument.checkbox;
        clickRowArgument.isSelected = checkbox;
      }
      if (props.showIndex) {
        const { index } = item;
        delete clickRowArgument.index;
        clickRowArgument.indexInCurrentPage = index;
      }
      emits("clickRow", clickRowArgument);
    };
    expose({
      clientItemsLength: totalItemsLength,
      currentPageFirstIndex,
      currentPageLastIndex,
      maxPaginationNumber,
      currentPaginationNumber,
      isLastPage,
      isFirstPage,
      nextPage,
      prevPage,
      updatePage
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "dataTable",
        ref: dataTable,
        class: normalizeClass(["vue3-easy-data-table", [__props.tableClassName]])
      }, [
        createElementVNode("div", {
          ref_key: "tableBody",
          ref: tableBody,
          class: normalizeClass(["vue3-easy-data-table__main", {
            "fixed-header": __props.fixedHeader,
            "fixed-height": __props.tableHeight,
            "show-shadow": showShadow.value,
            "table-fixed": unref(fixedHeaders).length,
            "hoverable": !__props.noHover,
            "border-cell": __props.borderCell
          }])
        }, [
          createElementVNode("table", null, [
            createElementVNode("colgroup", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(headersForRender), (header, index) => {
                return openBlock(), createElementBlock("col", {
                  key: index,
                  style: normalizeStyle(getColStyle(header))
                }, null, 4);
              }), 128))
            ]),
            unref(headersForRender).length && !__props.hideHeader ? (openBlock(), createElementBlock("thead", {
              key: 0,
              class: normalizeClass(["vue3-easy-data-table__header", [__props.headerClassName]])
            }, [
              createElementVNode("tr", null, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(headersForRender), (header, index) => {
                  return openBlock(), createElementBlock("th", {
                    key: index,
                    class: normalizeClass([{
                      sortable: header.sortable,
                      "none": header.sortable && header.sortType === "none",
                      "desc": header.sortable && header.sortType === "desc",
                      "asc": header.sortable && header.sortType === "asc",
                      "shadow": header.value === unref(lastFixedColumn)
                    }, typeof __props.headerItemClassName === "string" ? __props.headerItemClassName : __props.headerItemClassName(header, index)]),
                    style: normalizeStyle(getFixedDistance(header.value)),
                    onClick: withModifiers(($event) => header.sortable && header.sortType ? updateSortField(header.value, header.sortType) : null, ["stop"])
                  }, [
                    header.text === "checkbox" ? (openBlock(), createBlock(MutipleSelectCheckBox, {
                      key: unref(multipleSelectStatus),
                      status: unref(multipleSelectStatus),
                      onChange: toggleSelectAll
                    }, null, 8, ["status"])) : (openBlock(), createElementBlock("span", _hoisted_2, [
                      unref(slots)[`header-${header.value}`] ? renderSlot(_ctx.$slots, `header-${header.value}`, normalizeProps(mergeProps({ key: 0 }, header)), void 0, true) : (openBlock(), createElementBlock("span", _hoisted_3, toDisplayString(header.text), 1)),
                      header.sortable ? (openBlock(), createElementBlock("i", {
                        key: header.sortType ? header.sortType : "none",
                        class: normalizeClass(["sortType-icon", { "desc": header.sortType === "desc" }])
                      }, null, 2)) : createCommentVNode("", true)
                    ]))
                  ], 14, _hoisted_1);
                }), 128))
              ])
            ], 2)) : createCommentVNode("", true),
            unref(items).length && unref(headerColumns).length ? (openBlock(), createElementBlock("tbody", {
              key: 1,
              class: normalizeClass(["vue3-easy-data-table__body", { "row-alternation": __props.alternating }])
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(itemsForRender), (item, index) => {
                return openBlock(), createElementBlock(Fragment, { key: index }, [
                  createElementVNode("tr", {
                    class: normalizeClass([
                      { "even-row": (index + 1) % 2 === 0 },
                      typeof __props.bodyRowClassName === "string" ? __props.bodyRowClassName : __props.bodyRowClassName(item, index)
                    ]),
                    onClick: ($event) => clickRow(item)
                  }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(unref(headerColumns), (column, i) => {
                      return openBlock(), createElementBlock("td", {
                        key: i,
                        style: normalizeStyle(getFixedDistance(column, "td")),
                        class: normalizeClass([{
                          "shadow": column === unref(lastFixedColumn),
                          "can-expand": column === "expand"
                        }, typeof __props.bodyItemClassName === "string" ? __props.bodyItemClassName : __props.bodyItemClassName(column, i)]),
                        onClick: ($event) => column === "expand" ? updateExpandingItemIndexList(index, item, $event) : null
                      }, [
                        unref(slots)[`item-${column}`] ? renderSlot(_ctx.$slots, `item-${column}`, normalizeProps(mergeProps({ key: 0 }, item)), void 0, true) : column === "expand" ? (openBlock(), createElementBlock("i", {
                          key: 1,
                          class: normalizeClass(["expand-icon", { "expanding": expandingItemIndexList.value.includes(index) }])
                        }, null, 2)) : column === "checkbox" ? (openBlock(), createBlock(SingleSelectCheckBox, {
                          key: 2,
                          checked: item[column],
                          onChange: ($event) => toggleSelectItem(item)
                        }, null, 8, ["checked", "onChange"])) : (openBlock(), createElementBlock(Fragment, { key: 3 }, [
                          createTextVNode(toDisplayString(generateColumnContent(column, item)), 1)
                        ], 64))
                      ], 14, _hoisted_5);
                    }), 128))
                  ], 10, _hoisted_4),
                  unref(ifHasExpandSlot) && expandingItemIndexList.value.includes(index) ? (openBlock(), createElementBlock("tr", {
                    key: 0,
                    class: normalizeClass({ "even-row": (index + 1) % 2 === 0 })
                  }, [
                    createElementVNode("td", {
                      colspan: unref(headersForRender).length,
                      class: "expand"
                    }, [
                      item.expandLoading ? (openBlock(), createBlock(LoadingLine, {
                        key: 0,
                        class: "expand-loading"
                      })) : createCommentVNode("", true),
                      renderSlot(_ctx.$slots, "expand", normalizeProps(guardReactiveProps(item)), void 0, true)
                    ], 8, _hoisted_6)
                  ], 2)) : createCommentVNode("", true)
                ], 64);
              }), 128))
            ], 2)) : createCommentVNode("", true)
          ]),
          unref(loading) ? (openBlock(), createElementBlock("div", _hoisted_7, [
            _hoisted_8,
            createElementVNode("div", _hoisted_9, [
              unref(ifHasLoadingSlot) ? renderSlot(_ctx.$slots, "loading", { key: 0 }, void 0, true) : (openBlock(), createBlock(Loading, { key: 1 }))
            ])
          ])) : createCommentVNode("", true),
          !unref(itemsForRender).length && !unref(loading) ? (openBlock(), createElementBlock("div", _hoisted_10, toDisplayString(__props.emptyMessage), 1)) : createCommentVNode("", true)
        ], 2),
        !__props.hideFooter ? (openBlock(), createElementBlock("div", _hoisted_11, [
          !__props.hideRowsPerPage ? (openBlock(), createElementBlock("div", _hoisted_12, [
            createTextVNode(toDisplayString(__props.rowsPerPageMessage) + " ", 1),
            createVNode(RowsSelector, {
              modelValue: rowsPerPageReactive.value,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => rowsPerPageReactive.value = $event),
              "rows-items": unref(rowsItemsComputed)
            }, null, 8, ["modelValue", "rows-items"])
          ])) : createCommentVNode("", true),
          createElementVNode("div", _hoisted_13, toDisplayString(`${unref(firstIndexOfItemsInCurrentPage)}-${unref(lastIndexOfItemsInCurrentPage)}`) + " of " + toDisplayString(unref(totalItemsLength)), 1),
          unref(ifHasPaginationSlot) ? renderSlot(_ctx.$slots, "pagination", normalizeProps(mergeProps({ key: 1 }, {
            isFirstPage: unref(isFirstPage),
            isLastPage: unref(isLastPage),
            currentPaginationNumber: currentPaginationNumber.value,
            maxPaginationNumber: unref(maxPaginationNumber),
            nextPage,
            prevPage
          })), void 0, true) : (openBlock(), createBlock(PaginationArrows, {
            key: 2,
            "is-first-page": unref(isFirstPage),
            "is-last-page": unref(isLastPage),
            onClickNextPage: nextPage,
            onClickPrevPage: prevPage
          }, createSlots({ _: 2 }, [
            __props.buttonsPagination ? {
              name: "buttonsPagination",
              fn: withCtx(() => [
                createVNode(ButtonsPagination, {
                  "current-pagination-number": currentPaginationNumber.value,
                  "max-pagination-number": unref(maxPaginationNumber),
                  onUpdatePage: updatePage
                }, null, 8, ["current-pagination-number", "max-pagination-number"])
              ])
            } : void 0
          ]), 1032, ["is-first-page", "is-last-page"]))
        ])) : createCommentVNode("", true)
      ], 2);
    };
  }
});
var DataTable = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-73151d92"]]);
if (typeof window !== "undefined" && window.Vue) {
  window.Vue.createApp({}).component("Vue3EasyDataTable", DataTable);
}
export { DataTable as default };
